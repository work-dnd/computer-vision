==========  kalman filter understanding ==========

- Kalman gain high : means current state uncertainty is high, sensor uncertainty is low, so update towards new measurement from sensor,like object position from camera

- kalman gain is low : measurement uncertainty is high, current state uncertainty is low, so keep close to previous prediction as sensor is noisy

---------- Practical Tracking Scenarios
Scenario A: Clear Day, Stable Camera	
Camera Characteristics:
- Very precise tracking
- Minimal noise
- Consistent frame rate

Kalman Gain Behavior:
- HIGH gain
- Quick adaptation to ball movement
- Follows camera measurements closely  

Scenario B: Foggy Day, Shaky Camera
Camera Characteristics:
- Blurry images
- Inconsistent tracking
- High sensor noise

Kalman Gain Behavior:
- LOW gain
- Slow, smooth tracking
- Relies more on previous predictions
- Filters out camera noise

---- Intuitive Mental Model

Think of Kalman Gain like a "Trust Slider":

Left side (Low Gain):

Trust previous prediction
Ignore new noisy measurement
Smooth, conservative tracking


Right side (High Gain):

Trust new measurement
Quickly adapt to changes
Responsive, but potentially more erratic

Code Example: Ball Tracking
===============================

class KalmanBallTracker:
    def __init__(self):
        # State: [x, vx, y, vy]
        self.state = np.zeros(4)
        self.covariance = np.eye(4) * 1000 #state uncertainty
    
    def predict(self):
        # Physics-based prediction
        # state transition matrix
        F = np.array([
            [1, 1, 0, 0],   # x = x + vx
            [0, 1, 0, 0],   # vx remains same
            [0, 0, 1, 1],   # y = y + vy
            [0, 0, 0, 1]    # vy remains same
        ])
        
        # Predict next state
        self.state = F @ self.state # @ : np.dot() or dot product
        
        # Update state uncertainty
        self.covariance = F @ (self.covariance @ F.T) + process_noise_covariance
        
        return self.state
    
    def update(self, measurement):
        # Measurement matrix
        H = np.array([
            [1, 0, 0, 0],  # Measure x position
            [0, 0, 1, 0]   # Measure y position
        ])
        
        # Measurement noise
        R = np.eye(2) * 100
        
        # Innovation (difference between prediction and measurement)
        innovation = measurement - H @ self.state
        
        # Innovation Covariance
        S = H @ (self.covariance @ H.T) + R 
        
        # KALMAN GAIN CALCULATION
        K = self.covariance @ H.T @ np.linalg.inv(S)
        
        # Update state based on Kalman Gain
        self.state += K @ innovation
        
        # Update covariance
        self.covariance -= K @ H @ self.covariance
        
        return self.state

# Usage
tracker = KalmanBallTracker()
measurements = [(10,20), (15,25), (18,30)]

for measurement in measurements:
    predicted_state = tracker.predict()
    updated_state = tracker.update(measurement)
    print(f"Updated Ball Position: {updated_state}")
